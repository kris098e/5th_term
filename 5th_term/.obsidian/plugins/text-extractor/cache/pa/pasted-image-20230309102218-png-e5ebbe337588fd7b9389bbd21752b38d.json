{"path":".obsidian/plugins/text-extractor/cache/pa/pasted-image-20230309102218-png-e5ebbe337588fd7b9389bbd21752b38d.json","text":"multThree x y z = x Â¥y * z What really happens when we do multThree 3 5 9 or ((multThree 3) 5) 9? First, 3 is applied to multThree, because they're separated by a space. That creates a function that takes one parameter and returns a function. So then 5 is applied to that, which creates a function that will take a parameter and multiply it by 15. 9 is applied to that function and the result is 135 or something. Remember that this function's type could also be written as multThree :: (Num a) => a -> (a -> (a -> a)) . The thing before the -> is the parameter that a function takes and the thing after it is what it returns. So our function takes an a and returns a function of type (Num a) => a -> (a -> a). Similarly, this function takes an a and returns a function of type (Num a) => a -> a.And this function, finally, just takes an a and returns an a. Take a look at this:","libVersion":"0.0.0","langs":"eng","hash":"","size":0}