{"path":".obsidian/plugins/text-extractor/cache/pa/pasted-image-20230316103030-png-ff6c83756ceeb3b998d4c08693fe7c6c.json","text":"4 -- class Functor f where 5 - fmap::i(a->b)->fa->fb 6 7 -- data Maybe a = Just a | Nothing 8 9 data Maybe2 a = Just2 a | Nothing2 deriving Show 10 11 instance Functor Maybe2 where 12 fmap func (Just2 a) = Just2 (func a) 13 fmap func Nothing2 = Nothing2 14 15 - haskell defines functor for Maybe, Either, Lists 16 17 data Tree a = Tip a | Branch (Tree a) (Tree a) deriving Show 18 19 instance Functor Tree where 2 fmap func (Tip a) = Tip (func aâ€™ 2 fmap func (Branch left right) = Branch (fmap func left) (fmap func right) -- fmap f right = f <> right","libVersion":"0.0.0","langs":"eng","hash":"","size":0}