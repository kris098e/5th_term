{"path":".obsidian/plugins/text-extractor/cache/00/00-history-pdf-9345d96287bd120456f95e89314d7c39.json","text":"1 A brief history of programming languages 2 Pioneers of programming ● Charles Babbage 1837 ○ Invented the Analytical Engine ○ For those interested in very beginning see https://www .youtube.com/watch?v=wOQuW6Q Fdos&ab_channel=RiceCompSci ● Konrad Zuse ○ Plankalkül (plan calculus) 1942-1945 ○ notation (never implemented) ● Corrado Böhm (1951) ○ First language with a compiler 3 And Then ... 4 Generations There are 4 \"generations\" of programming languages 1. machine code 2. assembly 3. high level languages (Fortran, C, Java, …) 4. ad-hoc/visual (V isual Basic, SQL, ...) 5 Programming Styles ● Imperative (+ object oriented) ● Functional ● Logic / Declarative ● Functional logic 6 Fortran ● First effectively implemented high-level language by John W . Backus at IBM (1956) ● Introduced variables, loops, procedures, statement labels and much more ● Earliest versions of Fortran had many unique features, often awkward, later kept along for compatibility ● Still widely used in engineering applications that require much array manipulation ● Newest version ○ Fortran 2018 7 Algol 60 • Design in 1960 by a group of people including John McCarthy, Alan J. Perlis, Peter Naur, ... • First to have block structure, recursion, and a formal definition • Not used now , but it is the ancestor of most contemporary languages • As far as design goes, Algol 60 was without doubt the most important innovation in the history of programming languages • American VS European battle 8 Cobol • Created by a consortium (1958) • Business-oriented computations – very strict program organization – poor control structures – elaborate data structures, record type introduced for the first time • Used to be very popular in business and government, much less at universities • Still used → legacy applications 9 Basic • The first in history language of personal computing (1964) • Designed to be easy to learn (Beginner's All-purpose Symbolic Instruction Code) • V ery simple, limited, though still general-purpose • Present-day versions of Basic are full-fledged languages—not \"basic\", and not easy to learn any more. 10 Simula 67 • An extension of Algol 60 designed for simulation of concurrent processes • Introduced the central concepts of object orientation : classes and encapsulation • Predecessor of Smalltalk and C++ • Now unused 11 Pascal • A conceptually simplified and cleaned-up successor (1970) of Algol 60 • A good language for teaching structured programming • Its later extensions (for example, Delphi) are full-fledged systems programming packages 12 C • The implementation language of Unix (1972) • A great tool for systems programming and a software development language on personal computers • Once fashionable, still in use, but usually superseded by C++ • Dangerous if not used properly: segmentation faults! • Relatively low-level 13 Lisp • One of the earliest programming languages (John McCarthy - 1958) • Based on the concept of computing by evaluating functions . V ery good for symbolic computing • For years, the only language for Artificial Intelligence (Prolog is 12 years younger) • Many dialects, two standards (Scheme, Common Lisp) • Lisp's successors are very elegant (Miranda, ML, Haskell) 14 Prolog • A very high-level programming language (1972) • Declarative, based on a subset of logic , with proofs interpreted as computation • V ery powerful: – Non-deterministic (built-in backtracking) – Elaborate, flexible pattern matching – Associative memory • In skilled hands, it is a very strong tool 15 C++ • An object-oriented extension of the imperative language C, designed in 1980 • This is a hybrid design, with object orientation added to a completely different base language 16 Java • Sized-down reworking of C++ designed in 1995 • Full object orientation • Designed for Internet programming, but general-purpose • V ery used (in the top 5 of the most used languages) • T o not be confused with JavaScript ! 17 Scripting languages • Text processing: – Perl (1987) – Python (1991) • W eb programming – JavaScript (1995) – PHP (1995) 18 \"New\" ones • Golang (channels for concurrency) • Kotlin (type inference) • Rust (ownership system) • T ypescript (optional static typing) 19 Bad things to avoid • https://www .destroyallsoftware.com/talks/wat from minute 1.22 20 Or Fun Things To Do :) http://lhartikk.github.io/ArnoldC/ IT'S SHOWTIME TALK TO THE HAND \"hello world\" YOU HAVE BEEN TERMINATED False I LIED T rue NO PROBLEMO If BECAUSE I'M GOING TO SAY PLEASE Else BULLSHIT EndIf YOU HAVE NO RESPECT FOR LOGIC While STICK AROUND EndWhile CHILL 21 Homeworks • Read chapter 13 of the Programming Language book","libVersion":"0.0.0","langs":"","hash":"","size":0}