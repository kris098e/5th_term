
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQNEQLTGTLTEGTEleftPLUSMINUSleftTIMESDIVIDEASSIGN COMMA DIVIDE DO ELSE EQ FUNCTION GT GTE IDENT IF INT LCURL LPAREN LT LTE MINUS NEQ PLUS PRINT RCURL REPEAT RETURN RPAREN SEMICOL THEN TIMES UNTIL VAR WHILEprogram : bodyempty :body : optional_variables_declaration_list optional_functions_declaration_list statement_listoptional_variables_declaration_list : empty\n                                           | variables_declaration_listvariables_declaration_list : VAR variables_list\n                                  | VAR variables_list variables_declaration_listvariables_list : IDENT\n                      | IDENT COMMA variables_listoptional_functions_declaration_list : empty\n                                           | functions_declaration_listfunctions_declaration_list : function\n                                  | function functions_declaration_listfunction : FUNCTION IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURLoptional_parameter_list : empty\n                               | parameter_listparameter_list : IDENT\n                      | IDENT COMMA parameter_liststatement : statement_return\n                 | statement_print\n                 | statement_assignment\n                 | statement_ifthenelse\n                 | statement_while\n                 | statement_repeat_until\n                 | statement_compoundstatement_repeat_until : REPEAT statement_list UNTIL expression SEMICOLstatement_return : RETURN expression SEMICOLstatement_print : PRINT expression SEMICOLstatement_assignment : IDENT ASSIGN expression SEMICOLstatement_ifthenelse : IF expression THEN statement ELSE statementstatement_while :  WHILE expression DO statementstatement_compound :  LCURL statement_list RCURLstatement_list : statement\n                      | statement statement_listexpression : expression_integer\n                  | expression_identifier\n                  | expression_call\n                  | expression_binop\n                  | expression_groupexpression_integer : INTexpression_identifier : IDENTexpression_call : IDENT LPAREN optional_expression_list RPARENexpression_binop : expression PLUS expression\n                        | expression MINUS expression\n                        | expression TIMES expression\n                        | expression DIVIDE expression\n                        | expression EQ expression\n                        | expression NEQ expression\n                        | expression LT expression\n                        | expression GT expression\n                        | expression LTE expression\n                        | expression GTE expressionexpression_group : LPAREN expression RPARENoptional_expression_list : empty\n                                | expression_listexpression_list : expression\n                       | expression COMMA expression_list'
    
_lr_action_items = {'FUNCTION':([0,3,4,5,10,12,13,32,51,101,105,],[-2,11,-4,-5,11,-6,-8,-7,-9,-2,-14,]),'RETURN':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,98,99,101,103,105,],[-2,-2,-4,-5,23,-10,-11,-12,-6,-8,23,-19,-20,-21,-22,-23,-24,-25,23,23,-13,-7,-9,-27,-28,23,23,-32,-29,-31,23,-26,-2,-30,-14,]),'PRINT':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,98,99,101,103,105,],[-2,-2,-4,-5,24,-10,-11,-12,-6,-8,24,-19,-20,-21,-22,-23,-24,-25,24,24,-13,-7,-9,-27,-28,24,24,-32,-29,-31,24,-26,-2,-30,-14,]),'IDENT':([0,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,32,33,43,45,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,90,92,94,97,98,99,101,103,105,],[-2,-2,-4,-5,13,25,-10,-11,-12,31,-6,-8,25,-19,-20,-21,-22,-23,-24,-25,42,42,42,42,25,25,-13,-7,13,42,42,71,-9,-27,42,42,42,42,42,42,42,42,42,42,42,-28,25,25,42,-32,-29,-31,71,42,25,-26,-2,-30,-14,]),'IF':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,98,99,101,103,105,],[-2,-2,-4,-5,26,-10,-11,-12,-6,-8,26,-19,-20,-21,-22,-23,-24,-25,26,26,-13,-7,-9,-27,-28,26,26,-32,-29,-31,26,-26,-2,-30,-14,]),'WHILE':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,98,99,101,103,105,],[-2,-2,-4,-5,27,-10,-11,-12,-6,-8,27,-19,-20,-21,-22,-23,-24,-25,27,27,-13,-7,-9,-27,-28,27,27,-32,-29,-31,27,-26,-2,-30,-14,]),'REPEAT':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,98,99,101,103,105,],[-2,-2,-4,-5,28,-10,-11,-12,-6,-8,28,-19,-20,-21,-22,-23,-24,-25,28,28,-13,-7,-9,-27,-28,28,28,-32,-29,-31,28,-26,-2,-30,-14,]),'LCURL':([0,3,4,5,7,8,9,10,12,13,15,16,17,18,19,20,21,22,28,29,30,32,51,52,65,67,68,70,90,92,95,98,99,101,103,105,],[-2,-2,-4,-5,29,-10,-11,-12,-6,-8,29,-19,-20,-21,-22,-23,-24,-25,29,29,-13,-7,-9,-27,-28,29,29,-32,-29,-31,101,29,-26,-2,-30,-14,]),'VAR':([0,12,13,51,101,],[6,6,-8,-9,6,]),'$end':([1,2,14,15,16,17,18,19,20,21,22,34,52,65,70,90,92,99,103,],[0,-1,-3,-33,-19,-20,-21,-22,-23,-24,-25,-34,-27,-28,-32,-29,-31,-26,-30,]),'COMMA':([13,36,37,38,39,40,41,42,71,75,76,77,78,79,80,81,82,83,84,88,89,96,],[33,-35,-36,-37,-38,-39,-40,-41,94,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,97,-53,-42,]),'RCURL':([14,15,16,17,18,19,20,21,22,34,49,52,65,70,90,92,99,103,104,],[-3,-33,-19,-20,-21,-22,-23,-24,-25,-34,70,-27,-28,-32,-29,-31,-26,-30,105,]),'UNTIL':([15,16,17,18,19,20,21,22,34,48,52,65,70,90,92,99,103,],[-33,-19,-20,-21,-22,-23,-24,-25,-34,69,-27,-28,-32,-29,-31,-26,-30,]),'ELSE':([16,17,18,19,20,21,22,52,65,70,90,91,92,99,103,],[-19,-20,-21,-22,-23,-24,-25,-27,-28,-32,-29,98,-31,-26,-30,]),'INT':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'LPAREN':([23,24,26,27,31,42,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[43,43,43,43,50,63,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'ASSIGN':([25,],[45,]),'SEMICOL':([35,36,37,38,39,40,41,42,44,66,75,76,77,78,79,80,81,82,83,84,89,93,96,],[52,-35,-36,-37,-38,-39,-40,-41,65,90,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,99,-42,]),'PLUS':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[53,-35,-36,-37,-38,-39,-40,-41,53,53,53,53,53,-43,-44,-45,-46,53,53,53,53,53,53,53,-53,53,-42,]),'MINUS':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[54,-35,-36,-37,-38,-39,-40,-41,54,54,54,54,54,-43,-44,-45,-46,54,54,54,54,54,54,54,-53,54,-42,]),'TIMES':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[55,-35,-36,-37,-38,-39,-40,-41,55,55,55,55,55,55,55,-45,-46,55,55,55,55,55,55,55,-53,55,-42,]),'DIVIDE':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[56,-35,-36,-37,-38,-39,-40,-41,56,56,56,56,56,56,56,-45,-46,56,56,56,56,56,56,56,-53,56,-42,]),'EQ':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[57,-35,-36,-37,-38,-39,-40,-41,57,57,57,57,57,-43,-44,-45,-46,57,57,57,57,57,57,57,-53,57,-42,]),'NEQ':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[58,-35,-36,-37,-38,-39,-40,-41,58,58,58,58,58,-43,-44,-45,-46,58,58,58,58,58,58,58,-53,58,-42,]),'LT':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[59,-35,-36,-37,-38,-39,-40,-41,59,59,59,59,59,-43,-44,-45,-46,59,59,59,59,59,59,59,-53,59,-42,]),'GT':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[60,-35,-36,-37,-38,-39,-40,-41,60,60,60,60,60,-43,-44,-45,-46,60,60,60,60,60,60,60,-53,60,-42,]),'LTE':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[61,-35,-36,-37,-38,-39,-40,-41,61,61,61,61,61,-43,-44,-45,-46,61,61,61,61,61,61,61,-53,61,-42,]),'GTE':([35,36,37,38,39,40,41,42,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,89,93,96,],[62,-35,-36,-37,-38,-39,-40,-41,62,62,62,62,62,-43,-44,-45,-46,62,62,62,62,62,62,62,-53,62,-42,]),'THEN':([36,37,38,39,40,41,42,46,75,76,77,78,79,80,81,82,83,84,89,96,],[-35,-36,-37,-38,-39,-40,-41,67,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-42,]),'DO':([36,37,38,39,40,41,42,47,75,76,77,78,79,80,81,82,83,84,89,96,],[-35,-36,-37,-38,-39,-40,-41,68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-42,]),'RPAREN':([36,37,38,39,40,41,42,50,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,100,102,],[-35,-36,-37,-38,-39,-40,-41,-2,-2,89,-17,95,-15,-16,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,96,-54,-55,-56,-53,-42,-18,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([0,101,],[2,104,]),'optional_variables_declaration_list':([0,101,],[3,3,]),'empty':([0,3,50,63,101,],[4,8,73,86,4,]),'variables_declaration_list':([0,12,101,],[5,32,5,]),'optional_functions_declaration_list':([3,],[7,]),'functions_declaration_list':([3,10,],[9,30,]),'function':([3,10,],[10,10,]),'variables_list':([6,33,],[12,51,]),'statement_list':([7,15,28,29,],[14,34,48,49,]),'statement':([7,15,28,29,67,68,98,],[15,15,15,15,91,92,103,]),'statement_return':([7,15,28,29,67,68,98,],[16,16,16,16,16,16,16,]),'statement_print':([7,15,28,29,67,68,98,],[17,17,17,17,17,17,17,]),'statement_assignment':([7,15,28,29,67,68,98,],[18,18,18,18,18,18,18,]),'statement_ifthenelse':([7,15,28,29,67,68,98,],[19,19,19,19,19,19,19,]),'statement_while':([7,15,28,29,67,68,98,],[20,20,20,20,20,20,20,]),'statement_repeat_until':([7,15,28,29,67,68,98,],[21,21,21,21,21,21,21,]),'statement_compound':([7,15,28,29,67,68,98,],[22,22,22,22,22,22,22,]),'expression':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[35,44,46,47,64,66,75,76,77,78,79,80,81,82,83,84,88,93,88,]),'expression_integer':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'expression_identifier':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'expression_call':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'expression_binop':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'expression_group':([23,24,26,27,43,45,53,54,55,56,57,58,59,60,61,62,63,69,97,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'optional_parameter_list':([50,],[72,]),'parameter_list':([50,94,],[74,100,]),'optional_expression_list':([63,],[85,]),'expression_list':([63,97,],[87,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> body','program',1,'p_program','lexer_parser.py',118),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',123),
  ('body -> optional_variables_declaration_list optional_functions_declaration_list statement_list','body',3,'p_body','lexer_parser.py',128),
  ('optional_variables_declaration_list -> empty','optional_variables_declaration_list',1,'p_optional_variables_declaration_list','lexer_parser.py',133),
  ('optional_variables_declaration_list -> variables_declaration_list','optional_variables_declaration_list',1,'p_optional_variables_declaration_list','lexer_parser.py',134),
  ('variables_declaration_list -> VAR variables_list','variables_declaration_list',2,'p_variables_declaration_list','lexer_parser.py',139),
  ('variables_declaration_list -> VAR variables_list variables_declaration_list','variables_declaration_list',3,'p_variables_declaration_list','lexer_parser.py',140),
  ('variables_list -> IDENT','variables_list',1,'p_variables_list','lexer_parser.py',148),
  ('variables_list -> IDENT COMMA variables_list','variables_list',3,'p_variables_list','lexer_parser.py',149),
  ('optional_functions_declaration_list -> empty','optional_functions_declaration_list',1,'p_optional_functions_declaration_list','lexer_parser.py',157),
  ('optional_functions_declaration_list -> functions_declaration_list','optional_functions_declaration_list',1,'p_optional_functions_declaration_list','lexer_parser.py',158),
  ('functions_declaration_list -> function','functions_declaration_list',1,'p_functions_declaration_list','lexer_parser.py',163),
  ('functions_declaration_list -> function functions_declaration_list','functions_declaration_list',2,'p_functions_declaration_list','lexer_parser.py',164),
  ('function -> FUNCTION IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL','function',8,'p_function','lexer_parser.py',172),
  ('optional_parameter_list -> empty','optional_parameter_list',1,'p_optional_parameter_list','lexer_parser.py',177),
  ('optional_parameter_list -> parameter_list','optional_parameter_list',1,'p_optional_parameter_list','lexer_parser.py',178),
  ('parameter_list -> IDENT','parameter_list',1,'p_parameter_list','lexer_parser.py',183),
  ('parameter_list -> IDENT COMMA parameter_list','parameter_list',3,'p_parameter_list','lexer_parser.py',184),
  ('statement -> statement_return','statement',1,'p_statement','lexer_parser.py',192),
  ('statement -> statement_print','statement',1,'p_statement','lexer_parser.py',193),
  ('statement -> statement_assignment','statement',1,'p_statement','lexer_parser.py',194),
  ('statement -> statement_ifthenelse','statement',1,'p_statement','lexer_parser.py',195),
  ('statement -> statement_while','statement',1,'p_statement','lexer_parser.py',196),
  ('statement -> statement_repeat_until','statement',1,'p_statement','lexer_parser.py',197),
  ('statement -> statement_compound','statement',1,'p_statement','lexer_parser.py',198),
  ('statement_repeat_until -> REPEAT statement_list UNTIL expression SEMICOL','statement_repeat_until',5,'p_statement_repeat_until','lexer_parser.py',202),
  ('statement_return -> RETURN expression SEMICOL','statement_return',3,'p_statement_return','lexer_parser.py',206),
  ('statement_print -> PRINT expression SEMICOL','statement_print',3,'p_statement_print','lexer_parser.py',211),
  ('statement_assignment -> IDENT ASSIGN expression SEMICOL','statement_assignment',4,'p_statement_assignment','lexer_parser.py',216),
  ('statement_ifthenelse -> IF expression THEN statement ELSE statement','statement_ifthenelse',6,'p_statement_ifthenelse','lexer_parser.py',221),
  ('statement_while -> WHILE expression DO statement','statement_while',4,'p_statement_while','lexer_parser.py',225),
  ('statement_compound -> LCURL statement_list RCURL','statement_compound',3,'p_statement_compound','lexer_parser.py',230),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexer_parser.py',235),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','lexer_parser.py',236),
  ('expression -> expression_integer','expression',1,'p_expression','lexer_parser.py',244),
  ('expression -> expression_identifier','expression',1,'p_expression','lexer_parser.py',245),
  ('expression -> expression_call','expression',1,'p_expression','lexer_parser.py',246),
  ('expression -> expression_binop','expression',1,'p_expression','lexer_parser.py',247),
  ('expression -> expression_group','expression',1,'p_expression','lexer_parser.py',248),
  ('expression_integer -> INT','expression_integer',1,'p_expression_integer','lexer_parser.py',253),
  ('expression_identifier -> IDENT','expression_identifier',1,'p_expression_identifier','lexer_parser.py',258),
  ('expression_call -> IDENT LPAREN optional_expression_list RPAREN','expression_call',4,'p_expression_call','lexer_parser.py',263),
  ('expression_binop -> expression PLUS expression','expression_binop',3,'p_expression_binop','lexer_parser.py',268),
  ('expression_binop -> expression MINUS expression','expression_binop',3,'p_expression_binop','lexer_parser.py',269),
  ('expression_binop -> expression TIMES expression','expression_binop',3,'p_expression_binop','lexer_parser.py',270),
  ('expression_binop -> expression DIVIDE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',271),
  ('expression_binop -> expression EQ expression','expression_binop',3,'p_expression_binop','lexer_parser.py',272),
  ('expression_binop -> expression NEQ expression','expression_binop',3,'p_expression_binop','lexer_parser.py',273),
  ('expression_binop -> expression LT expression','expression_binop',3,'p_expression_binop','lexer_parser.py',274),
  ('expression_binop -> expression GT expression','expression_binop',3,'p_expression_binop','lexer_parser.py',275),
  ('expression_binop -> expression LTE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',276),
  ('expression_binop -> expression GTE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',277),
  ('expression_group -> LPAREN expression RPAREN','expression_group',3,'p_expression_group','lexer_parser.py',282),
  ('optional_expression_list -> empty','optional_expression_list',1,'p_optional_expression_list','lexer_parser.py',287),
  ('optional_expression_list -> expression_list','optional_expression_list',1,'p_optional_expression_list','lexer_parser.py',288),
  ('expression_list -> expression','expression_list',1,'p_expression_list','lexer_parser.py',293),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','lexer_parser.py',294),
]
